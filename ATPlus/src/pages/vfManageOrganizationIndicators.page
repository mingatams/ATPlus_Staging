<apex:page controller="ClsOrgUnitIndicatorSController" extensions="ClsTabController1" id="ORGINDPage" sidebar="false" tabStyle="Data_Admin__tab" action="{!doAction}">
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar.css')}"/>
<apex:stylesheet value="{!$Resource.CustomTabCSS}"/>
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxcommon.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar_start.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgridcell.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/dhtmlxtreegrid.js')}" /> 
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_filter.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_group.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/excells/dhtmlxgrid_excell_link.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/ext/dhtmlxtreegrid_filter.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/ext/dhtmlxtreegrid_lines.js')}" /> 
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid_skins.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/skins/dhtmlxgrid_dhx_skyblue.css')}"/>

<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxcontainer.js')}" />
<apex:includeScript value="{!URLFOR($Resource.CustomDialog)}" />

<style>
    div.gridbox_dhx_skyblue table.obj tr td{font-family:Tahoma; font-size:11px; border-width: 1px 1px 1px 1px; border-color : #FDFDFD #A4BED4 #A4BED4 #FDFDFD;}
    //.rich-tabpanel-content { background-color: #E3EFFF;}    
    //.activeTab {background-color: #002060; color:#E3EFFF; background-image:none; height:36px; font-size:15px; font-weight:bold;font-family:Tahoma;}
    //.inactiveTab {background-color: #E3EFFF; color:#002060; background-image:none; height:36px;font-size:15px; font-weight:bold;font-family:Trebuchet MS;}
    div.gridbox_dhx_skyblue table.hdr td { Font-size:12px; font-family:Trebuchet MS;}
    div.gridbox_dhx_skyblue table.obj tr td{ font-size:12px; font-family:Trebuchet MS;}
    .dhx_combo_select, .gridbox_dhx_skyblue .dhx_combo_edit, .gridbox_dhx_skyblue .dhx_textarea{ font-size:12px; }
    div.gridbox_dhx_skyblue table.obj tr td { font-family: Arial, Verdana, sans-serif; font-size:11px;}
    div.gridbox_dhx_skyblue table.hdr td { font-family:Arial, Verdana, sans-serif; font-size:12px; text-align:center;}
    .rich-tab-bottom-line.table { margin-left: -1px;}
    div.gridbox table.obj td.group_row { background-color: #4B627F; border-color:#FDFDFD #A4BED4 #A4BED4 #FDFDFD; border-width:1px; color: #FFFFFF}
    div.gridbox_dhx_skyblue table.hdr td div.hdrcell { padding-left:0px;}
</style>
  
  <script>
   
   
   var mygrids;
   var dhxLayout;
    //dhxLayout = new dhtmlXLayoutObject("parentId", "3L");
    //window.onload = function dispIndicatorsTargetGrid1(){
    function dispIndicatorsTargetGrid1(){
        //alert('{!selectedTab1}');
        document.body.style.cursor='wait';
        if('{!selectedTab1}' == 'Standard' || '{!selectedTab1}' == ''){
            callGoAction();
            //invokeStandard();
            //var xmlStrLocal = '{!xmlString}';
            //dispStandardIndicatorsGrid(xmlStrLocal,'gridboxS','{!$Component.saveFS}');
        } else if('{!selectedTab1}' == 'ftf'){
            invokeStandard1();
            var xmlStrLocal = '{!xmlString}';
            dispStandardIndicatorsGrid(xmlStrLocal,'gridboxF','{!$Component.saveFT}');
        } else if('{!selectedTab1}' == 'Pepfar'){
            invokeStandard2();
            var xmlStrLocal = '{!xmlString}';
            dispStandardIndicatorsGrid(xmlStrLocal,'gridboxP','{!$Component.savePP}');
        } else if('{!selectedTab1}' == 'Custom'){
            invokeStandard4();
            var xmlStrLocal = '{!xmlString}';
            dispStandardIndicatorsGrid(xmlStrLocal,'gridboxC');
        }
        document.body.style.cursor='default';
    }
   
   
   
   function dispStandardIndicatorsGrid(xmlStr,containerId,btnId){
        document.getElementById(containerId).innerHTML = "";
        mygrids = new dhtmlXGridObject(containerId,"100%", "100%");
        mygrids.selMultiRows = true;
        mygrids.setImagePath("{!URLFOR($Resource.dhtmlxGrid, '/dhtmlxGrid/codebase/imgs/')}");  
        mygrids.setHeader("Indicator Code,Indicator Name,USAID Tag{#special},User Defined Tag{#special1},Data Type, Indicator Type,PPR,Active,Custom,Select,");
        mygrids.attachHeader("#text_filter,#text_filter,#text_filter,#text_filter,#text_filter,#text_filter,#filter_checkbox,#filter_checkbox,#filter_checkbox,#filter_checkbox,#rspan");
        //mygrids.setInitWidths("178,560,75,70,85,85,45,50,55,25");
        mygrids.setInitWidthsP("14,40,10,10,5,5,3.5,3.65,4.5,4.5,0");
        mygrids.setColAlign("left,left,left,left,left,left,center,center,center,center,center");
        mygrids.setColTypes("tree,ed,rotxt,txt,co,co,ch,ch,ch,ch,ro");
        mygrids.getCombo(4).put(1, "Numeric");
        mygrids.getCombo(4).put(2, "Percentage");
        mygrids.getCombo(4).put(3, "Currency");
        mygrids.getCombo(4).put(4, "Text");
        mygrids.getCombo(5).put(1, "Direct");
        mygrids.getCombo(5).put(2, "Impact");
        mygrids.getCombo(5).put(3, "Outcome");
        mygrids.getCombo(5).put(4, "Output");
        //mygrids.setColSorting("str,str,str,str,str,str,str,str,str,str");
        mygrids.enableAutoHeigth(false);
        mygrids.enableResizing("false,false,false,false,false,false,false,false,false,false,false");
        mygrids.enableTooltips("true,true,true,true,false,false,false,false,false,false,false");
        mygrids.enableTreeCellEdit(false);
        mygrids.attachEvent("onRowSelect",customRowSelectHandlr);
        mygrids.attachEvent("onCheck",selectParent);
        mygrids.attachEvent("onRowCreated",lockCheckbox);
        mygrids.attachEvent("onMouseOver",doonMouseOver);
        mygrids.attachEvent("onFilterStart", doStart);
        mygrids.attachEvent("onFilterEnd", doExpand);
        mygrids.attachEvent("onEditCell",doOnEdit);
        //mygrids.enableFilteringMode(true);
        mygrids.init();
        mygrids.setSkin("dhx_skyblue");
        mygrids.loadXMLString(xmlStr);
        mygrids.sortRows(0,"str", "asc");
        mygrids.setFiltrationLevel(-2);
        document.getElementById("addInd").disabled = true;
        document.getElementById("addInd1").disabled = true;
        mygrids.expandAll();
        var id = mygrids.getRowId(0);
        mygrids.collapseAll(id);
        var allChildren = mygrids.getSubItems(id);
        var subItemsList = allChildren.split(",");
        var id1 = subItemsList.length+1;
        var id2 = mygrids.getRowId(id1 );
        if(id2 == 'F4'){
            mygrids.collapseAll(id2);
        }
   }  
   
   function dispCustomIndicatorsGrid(xmlStr,containerId){
        document.getElementById(containerId).innerHTML = "";
        mygridc = new dhtmlXGridObject(containerId,"100%", "100%");
        mygridc.selMultiRows = true;
        mygridc.setImagePath("{!URLFOR($Resource.dhtmlxGrid, '/dhtmlxGrid/codebase/imgs/')}");  
        mygridc.setHeader("Indicator Code,Indicator Name,Data Type, Indicator Type,USAID Tag{#special},User Defined Tag{#special1},PPR,Active,,");
        mygridc.attachHeader("#text_filter,#text_filter,#text_filter,#text_filter,#text_filter,#text_filter,#filter_checkbox,#filter_checkbox,#rspan,#rspan");
        mygridc.setInitWidthsP("14,46,7,7,7,6.5,6.5,6.15,0,0");
        mygridc.setColAlign("left,left,left,left,left,left,center,center,center,center");
        mygridc.setColTypes("tree,rotxt,rotxt,rotxt,rotxt,rotxt,ch,ch,ro,ro");
        mygridc.enableAutoHeigth(false);
        mygridc.enableResizing("false,false,false,false,false,false,false,false,false,false");
        mygridc.enableTooltips("true,true,false,false,true,true,false,false,false,false");
        mygridc.enableTreeCellEdit(false);
        mygridc.attachEvent("onMouseOver",doonMouseOver1);
        mygridc.attachEvent("onFilterStart", doStart);
        mygridc.init();
        mygridc.setSkin("dhx_skyblue");
        mygridc.loadXMLString(xmlStr);
        mygridc.customGroupFormat=function(name,count){
          if (name == '1') 
          {  
              name = 'F / Standard';
          } else if (name == '2') 
          {  
              name = 'FTF';
          } else if (name == '3') 
          {  
              name = 'PEPFAR';
          }
          return name;
        }
        mygridc.expandAll();
        mygridc.sortRows(0,"str", "asc");
        //mygridc.groupBy(9);
        mygridc.setColumnHidden(8,true);
        mygridc.setColumnHidden(9,true);
        mygridc.attachEvent("onOpenEnd", doonexpand);
        mygridc.setFiltrationLevel(-2);
   }
   
   function doonexpand(id,state){
      //mygridc.sortRows(0,"str", "asc");
      //mygrids.sortRows(9,"str", "des");
      mygridc.groupBy(9); 
   }
   
   dhtmlXGridObject.prototype._in_header_special=function(tag,index,data){ 
       tag.innerHTML=data[0];
       tag.title="A searchable field designating the standard USAID areas the indicator supports, if one exists."; 
   }
   dhtmlXGridObject.prototype._in_header_special1=function(tag,index,data){ 
       tag.innerHTML=data[0];
       tag.title="A searchable, editable field for users to identify Mission specific groups of indicators."; 
   }
   
   dhtmlXGridObject.prototype._in_header_filter_checkbox=function(t,i,c){
     t.innerHTML=c[0]+"<input type='checkbox' />"+c[1];
     var self=this;
     t.firstChild.onclick=function(e){
       self.filterBy(i,this.checked?1:0);
      (e||event).cancelBubble=true;
     }
   }
   
   function doOnEdit(stage,rId,cInd,nValue,oValue){
      // alert(stage);
      if(stage == 2 && cInd == 3 && nValue.length > 255){
        var val = mygrids.cells(rId,3).getValue();
        mygrids.cells(rId,3).setValue(val.substring(0,255));
      }
      
       if(stage ==2 && cInd == 4) {
         var dType = mygrids.cells(rId,4).getValue();
         if((dType.toUpperCase() == 'NUMERIC'.substring(0,dType.length)) || dType == '1'){
             mygrids.cells(rId,4).setValue('1');
         } else if((dType.toUpperCase() == 'PERCENTAGE'.substring(0,dType.length)) || dType == '2'){
             mygrids.cells(rId,4).setValue('2');
         } else if((dType.toUpperCase() == 'CURRENCY'.substring(0,dType.length)) || dType == '3'){
             mygrids.cells(rId,4).setValue('3');
         } else if((dType.toUpperCase() == 'TEXT'.substring(0,dType.length)) || dType == '4'){
             mygrids.cells(rId,4).setValue('4');
         } else {
             mygrids.cells(rId,4).setValue('1');
         }
     }
     if(stage ==2 && cInd == 5) {
         var iType = mygrids.cells(rId,5).getValue();
         if(iType==null || iType == '' || iType.length == 0){
             mygrids.cells(rId,5).setValue('');
         } else if((iType.toUpperCase() == 'DIRECT'.substring(0,iType.length)) || iType == '1'){
             mygrids.cells(rId,5).setValue('1');
         } else if((iType.toUpperCase() == 'IMPACT'.substring(0,iType.length)) || iType == '2'){
             mygrids.cells(rId,5).setValue('2');
         } else if((iType.toUpperCase() == 'OUTCOME'.substring(0,iType.length)) || iType == '3'){
             mygrids.cells(rId,5).setValue('3');
         } else if((iType.toUpperCase() == 'OUTPUT'.substring(0,iType.length)) || iType == '4'){
             mygrids.cells(rId,5).setValue('4');
         } else {
             mygrids.cells(rId,5).setValue('');
         } 
     }
          
      /* if (stage == 2 && cInd == 1 && (nValue != null || nValue != '')) {
           document.getElementById('{!$component.ORGINDPage.std.saveFS}').disabled = false;
           document.getElementById('{!$component.ORGINDPage.ftf.saveFT}').disabled = false;    
           document.getElementById('{!$component.ORGINDPage.pep.savePP}').disabled = false;    
           document.getElementById('{!$component.ORGINDPage.std.saveClose1}').disabled = flase;
           document.getElementById('{!$component.ORGINDPage.ftf.saveClose2}').disabled = false;    
           document.getElementById('{!$component.ORGINDPage.pep.saveClose3}').disabled = false; 
        }*/
          
        if(stage == 2 && cInd == 3 && (nValue.length != 0)){
            var parId = mygrids.getParentId(rId);
            var jImg = mygrids.getItemImage(parId);
            mygrids.cells(rId,9).setValue(1);
            mygrids.cells(rId,7).setValue(1);
            if (jImg == 'indicator.png' || jImg == 'custom-indicator.png'){
            mygrids.cells(parId,9).setValue(1);
            mygrids.cells(parId,7).setValue(1);
            mygrids.cells(parId,9).cell.wasChanged=true;
            }
        }       
        if (stage == 2 && cInd == 1 && (nValue == null || nValue == '')) {
            alert('Indicator/Sub Indicator Name Should not be Empty');
            mygrids.cells(rId,9).setValue(0);            
            window.setTimeout(function(){mygrids.selectCell(mygrids.getRowIndex(rId),1,false,false,true);mygrids.cells(rId,9).setValue(1);},1);
            return true;
        }else { 
            if (stage == 2 && cInd == 1 && (nValue != null || nValue != '')){
                document.getElementById("addInd").disabled = false;
                return true;
            } else {
                return true;
            }
        }
   }
   
       
   function doStart(indexes,values) {
    count = 0;
    for (i=0;i<values.length; i++){
      if(values[i].length != 0){
       count = count + 1;
      }
    }
      return true;
   }
   
    function customRowSelectHandlr(){
        var selectedId = mygrids.getSelectedRowId();
        var cellVal = mygrids.cells(selectedId,1).getValue();
        var j = mygrids.getItemImage(selectedId);
        if( j != 'sub-indicator.png' && j != 'custom-sub-indicator.png' && j != null ){
           document.getElementById("addInd").disabled = false;
           document.getElementById("addInd1").disabled = false;
           document.getElementById("addInd2").disabled = false;
           
        } else {
           if( (j == 'custom-indicator.png' || j == 'custom-sub-indicator.png') && cellVal == null ){
           document.getElementById("addInd").disabled = true; 
           document.getElementById("addInd1").disabled = true; 
           document.getElementById("addInd2").disabled = true; 
           } else {
           document.getElementById("addInd").disabled = true; 
           document.getElementById("addInd1").disabled = true; 
           document.getElementById("addInd2").disabled = true; 
           }
        }
    }   
       
   function doonMouseOver(id,index){
       var val = mygrids.getItemImage(id);
       var indVal = mygrids.cellById(id,0).getValue();
       indVal= indVal.substring(6);
       
       
       if (val == "po.png") {
       mygrids.cellById(id,0).setAttribute("title","Program Objective: "+indVal);
       }
       if (val == "pa.png") {
       mygrids.cellById(id,0).setAttribute("title","Program Area: "+indVal);
       }
       if (val == "pe.png") {
       mygrids.cellById(id,0).setAttribute("title","Program Element: "+indVal);
       }
       if (val == "pse.png") {
       mygrids.cellById(id,0).setAttribute("title","Program Sub Element: "+indVal);
       }
       if (val == "indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Indicator: "+indVal);
       }
       if (val == "sub-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Disaggregation: "+indVal);
       }
       if (val == "custom-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Custom Indicator: "+indVal);
       }
       if (val == "custom-sub-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Custom Disaggregation: "+indVal);
       }
       var val1 = mygrids.cells(id,index).getValue();
       if (val1 == "") return false; 
       return true;
   }
   
   function doonMouseOver1(id,index){
       var val = mygridc.getItemImage(id);
       var indVal = mygridc.cellById(id,0).getValue();
       indVal= indVal.substring(6);
       
       
       if (val == "indicator.png") {
       mygridc.cellById(id,0).setAttribute("title","Indicator: "+indVal);
       }
       if (val == "sub-indicator.png") {
       mygridc.cellById(id,0).setAttribute("title","Disaggregation: "+indVal);
       }
       if (val == "custom-indicator.png") {
       mygridc.cellById(id,0).setAttribute("title","Custom Indicator: "+indVal);
       }
       if (val == "custom-sub-indicator.png") {
       mygridc.cellById(id,0).setAttribute("title","Custom Disaggregation: "+indVal);
       }
       var val1 = mygridc.cells(id,index).getValue();
       if (val1 == "") return false; 
       return true;
   }
      
   function lockCheckbox(id){
       
       var val = mygrids.getItemImage(mygrids.getParentId(id));
       
       if (mygrids.cells(id,9).getValue() == 1){
           if (val != "po.png" && val != "pa.png" && val != "pe.png" && val != "pse.png") {
               mygrids.cells(mygrids.getParentId(id),9).setDisabled(true);
           }
       }
       if (mygrids.cells(id,9).getAttribute("disabled")){
           mygrids.cells(id,9).setDisabled(true);
       }
       if (mygrids.cells(id,4).getAttribute("disabled")){
              mygrids.cells(id,4).setDisabled(true);
       }
       if (mygrids.cells(id,8).getAttribute("disabled")){
              mygrids.cells(id,8).setDisabled(true);
       }
   }
   
      
   function call02(hidd,hidd1){
       
       //mygrids.editStop();
       document.getElementById(hidd1).value = mygrids.getChangedRows(true);
       mygrids.setSerializableColumns("true,true,true,true,true,true,true,true,true,true");
       mygrids.xml.cell_attrs.push("Id");
       document.getElementById(hidd).value = mygrids.serialize();
       console.log('Hidden Value1'+document.getElementById(hidd1).value);
       console.log('Hidden Value'+document.getElementById(hidd).value);
   }
   
   function selectParent(rId, cInd, state){
       var pId = mygrids.getParentId(rId);
       var j = mygrids.getItemImage(pId);
       var n = mygrids.getItemImage(rId);
       var type = mygrids.cells(rId,9).getAttribute("disabled");
       var count = 0;
       var count1 = 0;
       if(mygrids.hasChildren(rId)){
           var allChildren1 = mygrids.getAllSubItems(rId);
           var subItemsList1 = allChildren1.split(",");
           for(i =0; i<subItemsList1.length; i++ ){
               if (mygrids.cells(subItemsList1[i],9).getValue() == 1){
                    count1 = count1 +1;
                }
           }
       }
       if(state && cInd == 6){
           if(!type){
               mygrids.cells(rId,9).setValue(1);
           }
           mygrids.cells(rId,7).setValue(1);
           mygrids.cells(pId,9).setDisabled(true);
           if(n == 'indicator.png' || n == 'custom-indicator.png') {
               if (count1 == 0 && !type){
                   mygrids.cells(rId,9).setDisabled(false);
               } else {
                   mygrids.cells(rId,9).setDisabled(true);
               }
           }
           if (mygrids.cells(pId,9).getValue() == 0 && (j =='indicator.png' || j=='custom-indicator.png')){
                mygrids.cells(pId,9).setValue(1);
                mygrids.cells(pId,7).setValue(1);
                mygrids.cells(pId,6).setValue(1);
                mygrids.cells(pId,9).setDisabled(true);
                mygrids.cells(pId,9).cell.wasChanged=true;
           } else if (mygrids.cells(pId,9).getValue() == 1 && (j =='indicator.png' || j=='custom-indicator.png')) {
               if(mygrids.cells(pId,6).getValue() == 0)
               mygrids.cells(pId,6).setValue(1);
               if (mygrids.cells(pId,7).getValue() == 0)
               mygrids.cells(pId,7).setValue(1);
               mygrids.cells(pId,9).cell.wasChanged=true;
           } 
       }  
       if(state && cInd == 7){
       if(!type){
           mygrids.cells(rId,9).setValue(1);
           mygrids.cells(pId,9).setDisabled(true);
       }
       if(n == 'indicator.png' || n == 'custom-indicator.png') {
           if (count1 == 0 && !type){
               mygrids.cells(rId,9).setDisabled(false);
               } else {
               mygrids.cells(rId,9).setDisabled(true);
               }
       }
       if (mygrids.cells(pId,9).getValue() == 0 && (j =='indicator.png' || j=='custom-indicator.png')){
                          mygrids.cells(pId,9).setValue(1);
                          mygrids.cells(pId,7).setValue(1);
                          mygrids.cells(pId,9).setDisabled(true);
                          mygrids.cells(pId,9).cell.wasChanged=true;
           } else if (mygrids.cells(pId,9).getValue() == 1 && (j =='indicator.png' || j=='custom-indicator.png') && mygrids.cells(pId,7).getValue() == 0) {
               mygrids.cells(pId,7).setValue(1);
               mygrids.cells(pId,9).cell.wasChanged=true;
           }
       }
                  
       if(state && cInd == 9){   
           mygrids.cells(rId,7).setValue(1);
           mygrids.cells(pId,9).setDisabled(true);                                                    
           if (mygrids.cells(pId,9).getValue() == 0 && (j =='indicator.png' || j=='custom-indicator.png')){
                          mygrids.cells(pId,9).setValue(1);
                          mygrids.cells(pId,7).setValue(1);
                          mygrids.cells(pId,9).setDisabled(true);
                          //mygrids.cells(rId,8).setDisabled(true); 
                          mygrids.cells(pId,9).cell.wasChanged=true;
           }
        }
        else{ if (cInd == 9) {
            mygrids.cells(rId,7).setValue(0);
            mygrids.cells(rId,6).setValue(0);
            if (mygrids.cells(pId,9).getValue() == 1 && (mygrids.getRowById(pId)._locked) != true){
                    if (mygrids.hasChildren(pId) > 0 ){
                        var allChildren = mygrids.getAllSubItems(pId);
                        var subItemsList = allChildren.split(",");
                        for(i =0; i<subItemsList.length; i++ ){
                            if (mygrids.cells(subItemsList[i],9).getValue() == 1){
                                count = count +1;
                                mygrids.cells(pId,9).setDisabled(true);
                            }
                        }
                        if(count == 0){
                            mygrids.cells(pId,9).setDisabled(false);
                            mygrids.cells(pId,9).cell.wasChanged=false;
                        } 
                    }
           }
      }
     }
   }
 
 function addIndDis(){
  document.getElementById("addInd").disabled = true; 
  document.getElementById("addInd1").disabled = true; 
 }
 
 function doExpand(){
  if(count == 0){
      var id = mygrids.getRowId(0);
      var allChildren = mygrids.getSubItems(id);
      var subItemsList = allChildren.split(",");
      for(i=0;i<subItemsList.length;i++){
       mygrids.closeItem(subItemsList[i]);
      }
      } else {
      mygrids.expandAll();
      }
 }
 
function addIndicatorStandard(){
    var selectedId = mygrids.getSelectedRowId();
    
    var count = 0;
    var count2 = 0;
    if(selectedId == null)
    {
        alert('Please select a row from the grid to add a custom indicator/sub-indicator');
    }else{
        if (mygrids.hasChildren(selectedId) > 0 ){
            var allChildren = mygrids.getSubItems(selectedId);
            var subItemsList = allChildren.split(",");
            for(i =0; i<subItemsList.length; i++ ){
                var s1 = mygrids.cells(subItemsList[i],0).getValue();
                var j1 = mygrids.getItemImage(subItemsList[i]);
                var actCode1 = s1.substring(6,s1.length);
                if (j1=='custom-indicator.png'){
                    count = count +1;
                }
                if (j1=='custom-sub-indicator.png'){
                    count2 = count2 +1;
                }
            }
        }
        var f = mygrids.hasChildren(selectedId);
        var j = mygrids.getItemImage(selectedId);
        var s = mygrids.cells(selectedId,0).getValue();
        var actCode = s.substring(6,s.length);
        if(j == 'sub-indicator.png' || j=='custom-sub-indicator.png'){
            alert('You Cannot add an Indicator/Sub-indicator to a sub-indicator');
        }
        if(j!= null && j!='sub-indicator.png' && j!='indicator.png' && j!='custom-indicator.png' && j!='custom-sub-indicator.png')
        { 
            var chr = count+1;
            chr= chr > 9 ? chr : "0"+chr;
            console.log('Char 1:'+chr);
            var Code = "&nbsp;"+actCode+"-Z"+chr;
            var Cd1 = actCode+"-Z"+chr;
            var iid= "I"+Cd1;
            console.log('Code 1:'+Code);
            mygrids.addRow(iid,[Code,,,,,,,,,,],"",selectedId,'custom-indicator.png');
            mygrids.cells(iid,0).setAttribute("Id",Cd1);
            document.getElementById("addInd").disabled = true;
            document.getElementById("addInd1").disabled = true;
            document.getElementById("addInd2").disabled = true;
            //document.getElementById('{!$component.ORGINDPage.std.saveFS}').disabled = true;
            //document.getElementById('{!$component.ORGINDPage.ftf.saveFT}').disabled = true;    
            //document.getElementById('{!$component.ORGINDPage.pep.savePP}').disabled = true;
            //document.getElementById('{!$component.ORGINDPage.std.saveClose1}').disabled = true;
            //document.getElementById('{!$component.ORGINDPage.ftf.saveClose2}').disabled = true;    
            //document.getElementById('{!$component.ORGINDPage.pep.saveClose3}').disabled = true;
            mygrids.cells(iid,0).setAttribute("Id",Cd1);
            mygrids.cells(iid,4).setValue(1);
            mygrids.cells(iid,8).setValue(1);
            mygrids.cells(iid,9).setValue(1);
            mygrids.cells(iid,7).setValue(1);
            mygrids.cells(iid,9).setDisabled(true);
            mygrids.cells(iid,9).setAttribute('disabled',true);
            mygrids.openItem(selectedId);
            mygrids.selectCell(mygrids.getRowIndex(iid),1,false,false,true);
            mygrids.cells(iid,10).setCValue('<a onClick ="mygrids.deleteRow(\''+iid+ '\');" > <img src="/resource/1364426497000/dhtmlxGrid/dhtmlxGrid/codebase/imgs/delete.gif"></a>');
            //mygrids.cells(iid,10).setDisabled(true);
            mygrids.cells(iid,8).setDisabled(true);            
        }
        if(j == 'indicator.png' || j=='custom-indicator.png')
        { 
            var chr = String.fromCharCode(97+count2);
            console.log('Char 2:'+chr);
            console.log('actCode 2:'+actCode);
            if(j=='custom-indicator.png'){
                var Code = "&nbsp;"+actCode+chr;
                var Cd2 = actCode+chr;
            }else{
                var Code = "&nbsp;"+actCode+"Z"+chr;
                var Cd2 = actCode+"Z"+chr;
            }
            var iid= "S"+Cd2;
            console.log('Code 2:'+Code);
            mygrids.addRow(iid,[Code,,,,,,,,,,],"",selectedId,'custom-sub-indicator.png');
            document.getElementById("addInd").disabled = true;
            document.getElementById("addInd1").disabled = true;
            document.getElementById("addInd2").disabled = true;
            mygrids.cells(iid,0).setAttribute("Id",Cd2);
            mygrids.cells(iid,4).setValue(1);
            mygrids.cells(iid,8).setValue(1);
            mygrids.cells(iid,9).setValue(1);
            mygrids.cells(iid,7).setValue(1);
            mygrids.cells(iid,9).setDisabled(true);
            mygrids.cells(iid,9).setAttribute('disabled',true);
            mygrids.openItem(selectedId);
            mygrids.selectCell(mygrids.getRowIndex(iid),1,false,false,true);
            mygrids.cells(iid,10).setCValue('<a onClick ="mygrids.deleteRow(\''+iid+ '\');" > <img src="/resource/1364426497000/dhtmlxGrid/dhtmlxGrid/codebase/imgs/delete.gif"></a>');
            //mygrids.cells(iid,10).setDisabled(true);
            mygrids.cells(iid,8).setDisabled(true);            
            if( mygrids.cells(selectedId,9).getValue() == 0){
                mygrids.cells(selectedId,9).setValue(1);
                mygrids.cells(selectedId,7).setValue(1);
                mygrids.cells(selectedId,9).setDisabled(true);                
                mygrids.cells(selectedId,9).cell.wasChanged=true;
            } else {
                mygrids.cells(selectedId,9).setDisabled(true);
            }
        }
    } 
}   

    var previousstdorgVal;
    function onClickstdorg(){
       previousstdorgVal = document.getElementById('{!$component.ORGINDPage.std.missions1}').value;
    }
    
    function OnChangestdorg(){
        mygrids.editStop();
        //document.body.style.cursor='wait';
        var val = document.getElementById('{!$component.ORGINDPage.std.missions1}').value;
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){
                setPreviousVal(val);
                invokeStandard();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.std.missions1}');
                element.value = previousstdorgVal ;
                //callCancel();   
            } 
        } else {
            setPreviousVal(val);
            invokeStandard();
        }
        //document.body.style.cursor='default'; 
    }
    
    var previousstdobjVal;
    function onClickstdobj(){
       previousstdobjVal = document.getElementById('{!$component.ORGINDPage.std.objList}').value;
    }
    
    function OnChangestdobj(){
        mygrids.editStop();
        //document.body.style.cursor='wait';
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){  
                invokeStandard();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.std.objList}');
                element.value = previousstdobjVal ;
                //callCancel();   
            } 
        } else {
            invokeStandard();
        }
        //document.body.style.cursor='default'; 
    }
    
    
    var previousftforgVal;
    function onClickftforg(){
       previousftforgVal = document.getElementById('{!$component.ORGINDPage.ftf.missions}').value;
    }
    
    function OnChangeftforg(){
        mygrids.editStop();
        var val = document.getElementById('{!$component.ORGINDPage.ftf.missions}').value;
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){ 
                setPreviousVal(val); 
                invokeStandard1();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.ftf.missions}');
                element.value = previousftforgVal ;
                //callCancel();   
            } 
        } else {
            setPreviousVal(val);
            invokeStandard1();
        } 
    }
    
    var previouspeporgVal;
    function onClickpeporg(){
       previouspeporgVal = document.getElementById('{!$component.ORGINDPage.pep.missions}').value;
    }
    
    function OnChangepeporg(){
        mygrids.editStop();
        var val = document.getElementById('{!$component.ORGINDPage.pep.missions}').value;
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){
                setPreviousVal(val);  
                invokeStandard2();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.pep.missions}');
                element.value = previouspeporgVal ;
                //callCancel();   
            } 
        } else {
            setPreviousVal(val);
            invokeStandard2();
        } 
    }
    
    
    var previouspepobjVal;
    function onClickpepobj(){
       previouspepobjVal = document.getElementById('{!$component.ORGINDPage.pep.objList}').value;
    }
    
    function OnChangepepobj(){
        mygrids.editStop();
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){
               invokeStandard2();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.pep.objList}');
                element.value = previouspepobjVal;
            } 
        } else {
            invokeStandard2();
        } 
    }
    
    var previouscustomorgVal;
    function onClickcustomorg(){
       previouscustomorgVal = document.getElementById('{!$component.ORGINDPage.cus.missions}').value;
    }
    
    function OnChangecustomorg(){
        mygridc.editStop();
        var val = document.getElementById('{!$component.ORGINDPage.cus.missions}').value;
        if( mygrids.getChangedRows(true) != '') { 
            var conVal=  confirm('Do you want to continue with out saving the changes?');     
            if(conVal == true){ 
                setPreviousVal(val); 
                invokeStandard4();
            } else {
                var element = document.getElementById('{!$component.ORGINDPage.cus.missions}');
                element.value = previouscustomorgVal ;
                //callCancel();   
            } 
        } else {
            setPreviousVal(val);
            invokeStandard4();
        } 
    }
    
    function setPreviousVal(PreviousVal) {
        document.getElementById('{!$component.ORGINDPage.std.missions1}').value = PreviousVal
        document.getElementById('{!$component.ORGINDPage.ftf.missions}').value = PreviousVal
        document.getElementById('{!$component.ORGINDPage.pep.missions}').value = PreviousVal
        document.getElementById('{!$component.ORGINDPage.cus.missions}').value = PreviousVal
    }
   
    function addLoadEvent(func) {
      var oldonload = window.onload;
      if (typeof window.onload != 'function') {
        window.onload = func;
      } else {
        window.onload = function() {
          if (oldonload) {
            oldonload();
          }
          func();
        }
      }
    }
   addLoadEvent(dispIndicatorsTargetGrid1);   
   </script>
 
 <apex:sectionHeader title="Manage Organization Indicators" />
  <apex:outputPanel id="EmptyBlock"> </apex:outputPanel>  
  <div id = "parentId" style="height:5px; background:#1797C0;"></div><br></br>
  <apex:outputText style="font-size:12px;font-weight:bold;" value="{!navigationLink}" escape="false"> </apex:outputText> 
 <br></br>
  <br></br>   
  <apex:tabPanel switchType="client" id="tabPanel" value="{!selectedTab1}" selectedTab="{!defaultTab}" onclick="setSelectedTabOnController()" contentStyle="font-size: 12px;"   tabClass="activeTab" inactiveTabClass="inactiveTab">
  
  <apex:tab label="Custom" name="Custom" style="margin-left: -1px;" ontabenter="addIndDis(),invokeStandard4()">
       <apex:form id="cus" style="padding-left:1.5%;">
           <apex:actionFunction action="{!getTreeXMLNew}" name="invokeStandard4" oncomplete="dispCustomIndicatorsGrid('{!xmlString}','gridboxC')"  immediate="false"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="Custom" />
           </apex:actionFunction>
           <apex:outputLabel value="Organization">&nbsp;&nbsp;</apex:outputLabel>
           <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="missions" multiselect="false" value="{!selectedOrgUnit}" size="1">
               <apex:selectOptions value="{!OrgUnits}"></apex:selectOptions>
               <apex:actionSupport event="onfocus" onbeforedomupdate="onClickcustomorg()" reRender="EmptyBlock"  immediate="true" />
              <apex:actionSupport event="onchange" oncomplete="OnChangecustomorg()"  reRender="EmptyBlock"  immediate="false" />
           </apex:selectList>
           <!--<apex:commandButton value="Go" action="{!getTreeXMLNew}" oncomplete="dispCustomIndicatorsGrid('{!xmlString}','gridboxC')" reRender="cus"> 
               <apex:param name="source" assignTo="{!selectedSource}" value="Custom" />
           </apex:commandButton>--> <br></br><br></br>
           <div id="gridboxC" style="width:98%;height:300px;"> </div>
           <br></br>
           <div id = "btns2" style="width:98%;text-align:center;">
               <apex:commandButton value=" Cancel " action="{!cancel}" immediate="true"/>
           </div>
       </apex:form>
   </apex:tab>
  
  <apex:tab label="F / Standard" id="std1" name="Standard" style="margin-left: -1px;" ontabenter="addIndDis(),invokeStandard()" immediate="false"> 
    
      <apex:form id="std" style="padding-left:1.5%;"> 
        <apex:actionFunction action="{!getTreeXMLNew}" name="invokeStandard" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxS','{!$Component.saveFS}')" immediate="false"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="Standard" />
          </apex:actionFunction>
           <apex:actionFunction action="{!getTreeXMLNew}" name="callGoAction" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxS','{!$Component.saveFS}')" immediate="false" reRender="std"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="Standard" />
          </apex:actionFunction>
          <apex:actionFunction action="{!getTreeXMLNew}" name="callNoChanged" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxS','{!$Component.saveFS}')" immediate="false" reRender="std"> 
          </apex:actionFunction>
          <apex:actionFunction name="callCancel"  reRender="missions1" />
          <apex:actionRegion >
              <apex:outputLabel value="Organization">&nbsp;&nbsp;</apex:outputLabel>
              <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="missions1" multiselect="false" value="{!selectedOrgUnit}" size="1">
                  <apex:selectOptions value="{!OrgUnits}"></apex:selectOptions>              
                  <apex:actionSupport event="onfocus" onbeforedomupdate="onClickstdorg()" reRender="EmptyBlock"  immediate="true" />
                  <apex:actionSupport event="onchange" oncomplete="OnChangestdorg()"  reRender="EmptyBlock"  immediate="false" status="counterStatus" rerender="counterStatus"/>
              </apex:selectList>&nbsp;&nbsp;&nbsp;&nbsp;                 
              <apex:outputLabel value="Program Objective">&nbsp;&nbsp;</apex:outputLabel> 
              <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="objList" multiselect="false" value="{!selectedObjective}" size="1">
                  <apex:selectOptions id="objSelected" value="{!Objectives}"></apex:selectOptions>
                  <apex:actionSupport event="onfocus" onbeforedomupdate="onClickstdobj()" reRender="EmptyBlock"  immediate="true"/>              
                  <apex:actionSupport event="onchange" oncomplete="OnChangestdobj()"  reRender="EmptyBlock"  immediate="false" status="counterStatus" rerender="counterStatus"/>
              </apex:selectList>&nbsp;&nbsp;&nbsp;&nbsp;          
              </apex:actionRegion>
          <apex:inputHidden value="{!changedRowIds}" id="changedRows"/>
          <apex:inputHidden value="{!xmlString}" id="savedXML"/> 
          <!--<apex:commandButton value="Go" action="{!getTreeXMLNew}" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxS','{!$Component.saveFS}')" reRender="std"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="Standard" />
          </apex:commandButton>-->    
         <input type="button" value="Add Custom Indicator" id="addInd" disabled="true" onclick="(arguments[0]||window.event).cancelBubble=true;addIndicatorStandard()"/>
           <br></br><br></br> 
          <div id="gridboxS" style="width:95.8%;height:300px;"></div>
          <br></br>
          <div id="btns1" style="width:95.8%;text-align:center;">
          <apex:commandButton value=" Save " id="saveFS"  disabled="false" onclick="(arguments[0]||window.event).cancelBubble=true; call02('{!$Component.savedXML}','{!$Component.changedRows}')"  action="{!doSaveIndicators}" status="counterStatus" rerender="counterStatus,gridboxS">
          <apex:Param name="buttonId" value="save" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Save & Close "  id="saveClose1" onclick="call02('{!$Component.savedXML}','{!$Component.changedRows}')" action="{!doSaveIndicators}" rerender="counterStatus">
          <apex:Param name="buttonId" value="saveClose" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Cancel " id="can2" action="{!cancel}" immediate="true"/>
          <apex:actionStatus id="counterStatus" onStart="document.body.style.cursor = 'wait';return true;" onStop="document.body.style.cursor = 'default';return true;" >
          <apex:facet name="start" >
          <center><img src="/apexpages/devmode/img/saveStatus.gif"/></center>
          </apex:facet> 
          </apex:actionStatus>
          </div> 
          
      </apex:form>
   </apex:tab>
      
   <apex:tab label="FTF" id="pep1" name="ftf" style="margin-left: -1px;" ontabenter="addIndDis(),invokeStandard1()">
        <apex:form id="ftf" style="padding-left:1.5%;">     
          <apex:actionFunction action="{!getTreeXMLNew}" name="invokeStandard1" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxF','{!$Component.saveFT}')" immediate="false"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="FTF" />
          </apex:actionFunction>
          <apex:outputLabel value="Organization">&nbsp;&nbsp;</apex:outputLabel>
          <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="missions" multiselect="false" value="{!selectedOrgUnit}" size="1">
              <apex:selectOptions value="{!OrgUnits}"></apex:selectOptions>
              <apex:actionSupport event="onfocus" onbeforedomupdate="onClickftforg()" reRender="EmptyBlock"  immediate="true" />
              <apex:actionSupport event="onchange" oncomplete="OnChangeftforg()"  reRender="EmptyBlock"  immediate="false" />
          </apex:selectList>                 
          <apex:inputHidden value="{!changedRowIds}" id="changedRows"/>
          <apex:inputHidden value="{!xmlString}" id="savedXML"/>
          <!--<apex:commandButton value="Go" action="{!getTreeXMLNew}" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxF','{!$Component.saveFT}')" reRender="ftf"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="FTF" />
          </apex:commandButton>-->
          <input type="button" value="Add Custom Indicator" id="addInd1" disabled="true" onclick="(arguments[0]||window.event).cancelBubble=true;addIndicatorStandard()"/>
           <br></br><br></br> 
          <div id="gridboxF" style="width:98%;height:300px;"> </div>
          <br></br>
          <div id = "btns2" style="width:98%;text-align:center;">
          <apex:commandButton value=" Save " id="saveFT"  onclick="call02('{!$Component.savedXML}','{!$Component.changedRows}')" action="{!doSaveIndicators}"  status="counterStatus" rerender="counterStatus">
          <apex:Param name="buttonId" value="save" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Save & Close " id="saveClose2"  onclick="call02('{!$Component.savedXML}','{!$Component.changedRows}')" action="{!doSaveIndicators}" rerender="counterStatus">
          <apex:Param name="buttonId" value="saveClose" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Cancel " action="{!cancel}" immediate="true"/>
          <apex:actionStatus id="counterStatus" onStart="document.body.style.cursor = 'wait';return true;" onStop="document.body.style.cursor = 'default';return true;" >
          <apex:facet name="start" >
          <center><img src="/apexpages/devmode/img/saveStatus.gif"/></center>
          </apex:facet> 
          </apex:actionStatus>
          </div> 
      </apex:form>
   </apex:tab>
   
   <apex:tab label="PEPFAR" name="Pepfar" style="margin-left: -1px;" ontabenter="addIndDis(),invokeStandard2()" immediate="false">
        <apex:form id="pep" style="padding-left:1.5%;">     
          <apex:actionFunction action="{!getTreeXMLNew}" name="invokeStandard2" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxP','{!$Component.savePP}')"  immediate="false"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="PEPFAR" />
          </apex:actionFunction>
          <apex:outputLabel value="Organization">&nbsp;&nbsp;</apex:outputLabel>
          <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="missions" multiselect="false" value="{!selectedOrgUnit}" size="1">
              <apex:selectOptions value="{!OrgUnits}"></apex:selectOptions>
              <apex:actionSupport event="onfocus" onbeforedomupdate="onClickpeporg()" reRender="EmptyBlock"  immediate="true" />
              <apex:actionSupport event="onchange" oncomplete="OnChangepeporg()"  reRender="EmptyBlock"  immediate="false" />
          </apex:selectList>                 
          <apex:outputLabel value="Program Objective">&nbsp;&nbsp;</apex:outputLabel> 
          <apex:selectList style="font-family: Arial, Verdana, sans-serif; font-size:11px;" id="objList" multiselect="false" value="{!selectedObjective}" size="1">
              <apex:selectOptions value="{!PepfarObjectives}"></apex:selectOptions>
              <apex:actionSupport event="onfocus" onbeforedomupdate="onClickpepobj()" reRender="EmptyBlock"  immediate="true" />              
              <apex:actionSupport event="onchange" oncomplete="OnChangepepobj()"  reRender="EmptyBlock"  immediate="false" />
          </apex:selectList>
          <apex:inputHidden value="{!changedRowIds}" id="changedRows"/>
          <apex:inputHidden value="{!xmlString}" id="savedXML"/>
          <!--<apex:commandButton value="Go" action="{!getTreeXMLNew}" oncomplete="dispStandardIndicatorsGrid('{!xmlString}','gridboxP','{!$Component.savePP}')" reRender="pep"> 
              <apex:param name="source" assignTo="{!selectedSource}" value="PEPFAR" />
          </apex:commandButton>-->
          <input type="button" value="Add Custom Indicator" id="addInd2" disabled="true" onclick="(arguments[0]||window.event).cancelBubble=true;addIndicatorStandard()"/>
           <br></br><br></br> 
          <div id="gridboxP" style="width:98%;height:300px;"> </div>
          <br></br>
          <div id = "btns2" style="width:98%;text-align:center;">
          <apex:commandButton value=" Save " id="savePP"  reRender="test" onclick="call02('{!$Component.savedXML}','{!$Component.changedRows}')" action="{!doSaveIndicators}"  status="counterStatus" rerender="counterStatus">
          <apex:Param name="buttonId" value="save" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Save & Close " reRender="test" id="saveClose3" onclick="call02('{!$Component.savedXML}','{!$Component.changedRows}')" action="{!doSaveIndicators}" rerender="counterStatus">
          <apex:Param name="buttonId" value="saveClose" assignTo="{!buttonId}"/>
          </apex:commandButton>
          <apex:commandButton value=" Cancel " action="{!cancel}" immediate="true"/>
          <apex:actionStatus id="counterStatus" onStart="document.body.style.cursor = 'wait';return true;" onStop="document.body.style.cursor = 'default';return true;" >
          <apex:facet name="start" >
          <center><img src="/apexpages/devmode/img/saveStatus.gif"/></center>
          </apex:facet> 
          </apex:actionStatus>
          </div> 
      </apex:form>
   </apex:tab>
  </apex:tabPanel>
   <apex:outputPanel id="test">  </apex:outputPanel>
   <apex:form >
        <apex:actionFunction id="af" name="selectTabActionFunction" action="{!selectTab}" reRender="">
            <apex:param name="selectedTab1" assignTo="{!selectedTab1}" value="{!selectedTab1}"/>
        </apex:actionFunction>
    </apex:form>  
    
 <script type="text/javascript">
    function getSelectedTabName() {
   
        if (RichFaces) {
             var tabs = RichFaces.panelTabs['ORGINDPage:tabPanel'];       
            for (var i = 0; i < tabs.length; i++) {
                var tab = tabs[i];           
                if (RichFaces.isTabActive(tab.id + '_lbl')) {   
                   // alert(tab.name);
                    return tab.name;
                }
            }
        }
        return null;
    }
    function setSelectedTabOnController() {
        selectTabActionFunction(getSelectedTabName());
    }
 
</script>         
</apex:page>