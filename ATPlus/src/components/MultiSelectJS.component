<apex:component controller="MultiselectJSController">
    <script src="{!URLFOR($Resource.multiselect, 'jquery.multiselect.min.js')}"></script>
    
    <script>
    ;(function(namespace, j$) {
        ///////////////////////////////////
        //jury rig an Array.filter function
        ///////////////////////////////////
        if (!Array.prototype.filter)
		{
		  Array.prototype.filter = function(fun)
		  {
		    "use strict";
		
		    if (this === void 0 || this === null)
		      throw new TypeError();
		
		    var t = Object(this);
		    var len = t.length >>> 0;
		    if (typeof fun !== "function")
		      throw new TypeError();
		
		    var res = [];
		    var thisp = arguments[1];
		    for (var i = 0; i < len; i++)
		    {
		      if (i in t)
		      {
		        var val = t[i]; // in case fun mutates this
		        if (fun.call(thisp, val, i, t))
		          res.push(val);
		      }
		    }
		
		    return res;
		  };
		}
        ///////////////////////////////////
        //jury rig an Array.filter function
        ///////////////////////////////////
        
        ///////////////////////////////////
        //jury rig an Array.map function
        ///////////////////////////////////
        if (!Array.prototype.map) {

		  Array.prototype.map = function(callback, thisArg) {
		
		    var T, A, k;
		
		    if (this == null) {
		      throw new TypeError(' this is null or not defined');
		    }
		
		    // 1. Let O be the result of calling ToObject passing the |this| 
		    //    value as the argument.
		    var O = Object(this);
		
		    // 2. Let lenValue be the result of calling the Get internal 
		    //    method of O with the argument "length".
		    // 3. Let len be ToUint32(lenValue).
		    var len = O.length >>> 0;
		
		    // 4. If IsCallable(callback) is false, throw a TypeError exception.
		    // See: http://es5.github.com/#x9.11
		    if (typeof callback !== 'function') {
		      throw new TypeError(callback + ' is not a function');
		    }
		
		    // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.
		    if (arguments.length > 1) {
		      T = thisArg;
		    }
		
		    // 6. Let A be a new array created as if by the expression new Array(len) 
		    //    where Array is the standard built-in constructor with that name and 
		    //    len is the value of len.
		    A = new Array(len);
		
		    // 7. Let k be 0
		    k = 0;
		
		    // 8. Repeat, while k < len
		    while (k < len) {
		
		      var kValue, mappedValue;
		
		      // a. Let Pk be ToString(k).
		      //   This is implicit for LHS operands of the in operator
		      // b. Let kPresent be the result of calling the HasProperty internal 
		      //    method of O with argument Pk.
		      //   This step can be combined with c
		      // c. If kPresent is true, then
		      if (k in O) {
		
		        // i. Let kValue be the result of calling the Get internal 
		        //    method of O with argument Pk.
		        kValue = O[k];
		
		        // ii. Let mappedValue be the result of calling the Call internal 
		        //     method of callback with T as the this value and argument 
		        //     list containing kValue, k, and O.
		        mappedValue = callback.call(T, kValue, k, O);
		
		        // iii. Call the DefineOwnProperty internal method of A with arguments
		        // Pk, Property Descriptor
		        // { Value: mappedValue,
		        //   Writable: true,
		        //   Enumerable: true,
		        //   Configurable: true },
		        // and false.
		
		        // In browsers that support Object.defineProperty, use the following:
		        // Object.defineProperty(A, k, {
		        //   value: mappedValue,
		        //   writable: true,
		        //   enumerable: true,
		        //   configurable: true
		        // });
		
		        // For best browser support, use the following:
		        A[k] = mappedValue;
		      }
		      // d. Increase k by 1.
		      k++;
		    }
		
		    // 9. return A
		    return A;
		  };
		}
        ///////////////////////////////////
        //jury rig an Array.map function
        ///////////////////////////////////
        
        var $regionSelect = j$('.multiselect-region'),
            $opUnitSelect = j$('.multiselect-operatingunit'),
            $fiscalYearSelect = j$('.multiselect-fiscalyear'),
            $businessForecastListingSelect = j$('.multiselect-businessforecastlisting'),
            $bureauSelect = j$('.multiselect-bureau'),
            $bureauChildItemsSelect = j$('.multiselect-bureauChildItems');
        
        var widthFix = function() {
            j$(this).next().css('width', '');
        };
        var multiselectDefaults = {
            /* header: false, */
            minWidth: 150,
            /* height: 'auto', */
            create: widthFix
        };
        
        //load operating unit dependencies
        var regionToOpUnitMapping = null;
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.MultiselectJSController.getOpUnitDependencies}',
            function(result, event) {
                if(event.status) {
                    regionToOpUnitMapping = result;
                } else {
                    console.error(result, event);
                    regionToOpUnitMapping = {};
                }
            },
            {escape: false}
        );
        
        var selectToMultiselectValues = function($select) {
            return $select.multiselect('getChecked').map(function(){
                return this.value;    
            }).get();
        };
        
        var allOpUnitOptions = $opUnitSelect.children().get();
        
        var makeRegion = function() {
            $regionSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.OperatingUnit__c.fields.Region__c.label}',
                    close: function(event, ui) {
                        var checkedboxes,
                                checkedboxesValues,
                                opUnitValues,
                                flattenedOpUnitValues,
                                unqiueOpUnitValues = [];
                        //Get the checked boxes
                        checkedboxesValues = selectToMultiselectValues(j$(this));
                        
                        //lookup the operating units
                        opUnitValues = checkedboxesValues.map(function(current){
                            if(regionToOpUnitMapping && regionToOpUnitMapping[current])
                                return regionToOpUnitMapping[current];
                            return [];
                        });
                        
                        //if there is something selected and the mapping has loaded
                        if(opUnitValues.length > 0 && regionToOpUnitMapping != null) {
                            
                            //gather up all the lookups
                            flattenedOpUnitValues = opUnitValues.reduce(function(previous, current) {
                                return previous.concat(current);
                            });
                            
                            //remove duplicates (is this needed?)
                            unqiueOpUnitValues = flattenedOpUnitValues.filter(function (current, idx, arr) {
                                return arr.lastIndexOf(current) === idx;
                            });
                            
                            //update the op unit select
                            $opUnitSelect.empty();
                            $opUnitSelect.append(allOpUnitOptions.filter(function(current, idx, arr) {
                                return unqiueOpUnitValues.indexOf(current.text) !== -1;
                            }).sort(function(x, y) {
                                return x.text.localeCompare(y.text);
                            }));
                        } else {
                            $opUnitSelect.empty();
                            $opUnitSelect.append(allOpUnitOptions);
                        }
                        
                        //deselect all values
                        selectOptions = $opUnitSelect.children().get();
                        for(var idx in selectOptions) {
                            selectOptions[idx].selected = false;
                        }
                        
                        //refresh op unit multiselect
                        $opUnitSelect.multiselect('refresh');
                        widthFix.call($opUnitSelect);
                    }
                }));
        };
        var makeOperatingUnit = function() {
            $opUnitSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.OperatingUnit__c.label}'
                }));
        };
        var makeFiscalYear = function() {
            $fiscalYearSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.AAPlan__c.fields.FiscalYear__c.label}'
                }));
        };
        var makeBusinessForecastListing = function() {
            $businessForecastListingSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.AAPlanDetail__c.fields.Business_Forecast_Listing__c.label}'
                }));
        };
        var makeBureau = function() {
            $bureauSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.OperatingUnit__c.Fields.Bureau__c.label}'
                }));
        };
        var makeBureauChildItems = function() {
            $bureauChildItemsSelect
                .multiselect(j$.extend({}, multiselectDefaults, {
                    noneSelectedText: '{!$ObjectType.OperatingUnit__c.label}'
                }));
        };
        /*
        var loadBindings = function() {
        	makeRegion();
	        makeOperatingUnit();
	        makeFiscalYear();
	        makeBusinessForecastListing();
	        makeBureau();
	        makeBureauChildItems();
        }
        */
        makeRegion();
        makeOperatingUnit();
        makeFiscalYear();
        makeBusinessForecastListing();
        makeBureau();
        makeBureauChildItems();
        
        namespace.multiselectClearRegion = function() {
            $regionSelect.multiselect('uncheckAll');
        }
        namespace.multiselectClearOperatingUnit = function() {
            $opUnitSelect.multiselect('uncheckAll');
        }
        namespace.multiselectClearFiscalYear = function() {
            $fiscalYearSelect.multiselect('uncheckAll');
        }
        namespace.multiselectClearBusinessForecastListing = function() {
            $businessForecastListingSelect.multiselect('uncheckAll');
        }
        namespace.multiselectClearBureau = function() {
            $bureauSelect.multiselect('uncheckAll');
        }
        namespace.multiselectClearBureauChildItems = function() {
            $bureauChildItemsSelect.multiselect('uncheckAll');
        }
        var getSelectCheckedOptions = function($select) {
            var checkedValues = selectToMultiselectValues($select);
            return $select.children().get().filter(function(current, idx, arr){
                return checkedValues.indexOf(current.value) !== -1;
            });
        };
        
        namespace.getRegions = function() {
            return getSelectCheckedOptions($regionSelect);
        }
        namespace.getOperatingUnits = function() {
            return getSelectCheckedOptions($opUnitSelect);
        }
        namespace.getFiscalYears = function() {
            return getSelectCheckedOptions($fiscalYearSelect);
        }
        namespace.getBusinessForecastListings = function() {
            return getSelectCheckedOptions($businessForecastListingSelect);
        }
        namespace.getBureaus = function() {
            return getSelectCheckedOptions($bureauSelect);
        }
        namespace.getBureauChildItems = function() {
            return getSelectCheckedOptions($bureauChildItemsSelect);
        }
        namespace.loadBindings = function() {
        	$regionSelect.multiselect('destroy');
        	$opUnitSelect.multiselect('destroy');
        	$fiscalYearSelect.multiselect('destroy');
        	$bureauSelect.multiselect('destroy');
        	$businessForecastListingSelect.multiselect('destroy');
        	$bureauChildItemsSelect.multiselect('destroy');
        	
        	$regionSelect = j$('.multiselect-region'),
            $opUnitSelect = j$('.multiselect-operatingunit'),
            $fiscalYearSelect = j$('.multiselect-fiscalyear'),
            $businessForecastListingSelect = j$('.multiselect-businessforecastlisting'),
            $bureauSelect = j$('.multiselect-bureau'),
            $bureauChildItemsSelect = j$('.multiselect-bureauChildItems');
            
        	makeRegion();
	        makeOperatingUnit();
	        makeFiscalYear();
	        makeBusinessForecastListing();
	        makeBureau();
	        makeBureauChildItems();
        }
        namespace.multiselectClearAll = function() {
            namespace.multiselectClearRegion();
            namespace.multiselectClearOperatingUnit();
            namespace.multiselectClearFiscalYear();
            namespace.multiselectClearBusinessForecastListing();
            namespace.multiselectClearBureau();
            namespace.multiselectClearBureauChildItems();
        }
    })(window.multiselect = window.multiselect || {}, jQuery.noConflict());
    </script>
</apex:component>