<apex:component controller="ClsIndicatorSetupController"   allowDML="true" >
 <apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxcommon.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar_start.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgridcell.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/dhtmlxtreegrid.js')}" /> 
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_filter.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_group.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_splt.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/excells/dhtmlxgrid_excell_link.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/ext/dhtmlxgrid_selection.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/ext/dhtmlxtreegrid_filter.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTreeGrid, 'dhtmlxTreeGrid/codebase/ext/dhtmlxtreegrid_lines.js')}" />
<apex:includeScript value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxcontainer.js')}" />

<apex:stylesheet value="{!URLFOR($Resource.dhtmlxTabber, 'dhtmlxTabbar/codebase/dhtmlxtabbar.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/dhtmlxgrid_skins.css')}"/>
<apex:stylesheet value="{!URLFOR($Resource.dhtmlxGrid, 'dhtmlxGrid/codebase/skins/dhtmlxgrid_dhx_skyblue.css')}"/>

<style>  
    div.gridbox_dhx_skyblue table.obj tr td{font-family:Tahoma; font-size:11px; border-width: 1px 1px 1px 1px; border-color : #FDFDFD #A4BED4 #A4BED4 #FDFDFD;}
    div.gridbox_dhx_skyblue table.hdr td { Font-size:12px; font-family:Trebuchet MS;}
    div.gridbox_dhx_skyblue table.obj tr td{ font-size:12px; font-family:Trebuchet MS;}
    div.gridbox_dhx_skyblue table.obj tr td { font-family: Arial, Verdana, sans-serif; font-size:11px; }
    div.gridbox_dhx_skyblue table.hdr td { font-family:Arial, Verdana, sans-serif; font-size:12px; }
    //div.gridbox table.obj td.group_row { border-color:#FDFDFD #A4BED4 #A4BED4 #FDFDFD; border-width:1px; border-bottom-style:solid; }
    div.gridbox table.obj td.group_row { background-color: #4B627F; border-color:#FDFDFD #A4BED4 #A4BED4 #FDFDFD; border-width:1px; color: #FFFFFF}
   
    .dhx_combo_select, .gridbox_dhx_skyblue .dhx_combo_edit, .gridbox_dhx_skyblue .dhx_textarea{ font-size:12px;}
    .bPageBlock .detailList .labelCol { width:9%; }
    .bPageBlock .detailList .dataCol { width:25%; }
    body .bPageTitle { padding:0 0 0;}
    ul li, ol li { list-style: none; }
    a {color:#1797C0; font-size:12px; font-weight:bold;}
    //span ul li {   list-style: none; color: #b52828; }
    //element.style {  text-align:left;}
    element.style { color:red; font-family:Helvetica, sans-serif; font-size:11pt; font-weight:bold; overflow:auto; text-align:center;} 
    div.gridbox_dhx_skyblue table.hdr td { text-align:center; }   
</style>

 <script>

        function dispSetupIndicatorTree(){
        document.getElementById("gridboxCC").innerHTML = "";
        mygrids = new dhtmlXGridObject("gridboxCC","100%", "100%");
        mygrids.selMultiRows = true;
        mygrids.setImagePath("{!URLFOR($Resource.dhtmlxGrid, '/dhtmlxGrid/codebase/imgs/')}");        
        mygrids.setHeader("Indicator Code,Indicator Name,USAID Tag{#special}, User Defined Tag{#special1}, Indicator Type,PPR,Active,Custom,Select,");
        mygrids.attachHeader("#text_filter,#text_filter,#text_filter,#text_filter,#text_filter,#filter_checkbox,#filter_checkbox,#filter_checkbox,#filter_checkbox,#rspan");
        mygrids.setInitWidthsP("10,40,10,10,10,5,5,5,5,0");
        mygrids.setColAlign("left,left,left,left,left,center,center,center,center,center");
        mygrids.setColTypes("tree,rotxt,rotxt,rotxt,rotxt,ch,ch,ch,ch,rotxt");
        mygrids.enableAutoHeigth(false);
        mygrids.enableResizing("false,false,false,false,false,false,false,false,false");
        mygrids.enableTooltips("true,true,true,true,false,false,false,false,false,false");
        mygrids.enableTreeCellEdit(false);
        mygrids.enableSmartXMLParsing(true);   
        mygrids.setFiltrationLevel(-2);
        mygrids.init();
        mygrids.attachEvent("onRowCreated",lockCheckbox);
        mygrids.setSkin("dhx_skyblue");       
        mygrids.loadXMLString('{!xmlStringSetup}'); 
        //mygrids.attachEvent("onRowCreated",lockCheckbox);
        mygrids.attachEvent("onMouseOver",doonMouseOver);
        mygrids.attachEvent("onFilterStart", doStart);
        mygrids.attachEvent("onFilterEnd", doExpand); 
        mygrids.expandAll();
        mygrids.sortRows(0,"str", "asc");   
        mygrids.customGroupFormat=function(name,count){
          if (name == 'STANDARD') 
          { name = 'F / Standard';
          }  
          return name;
        }
        mygrids.setColumnHidden(9,true);
        mygrids.sortRows(9,"str", "asc");       
        mygrids.sortRows(0,"str", "asc");
        mygrids.groupBy(9);
        //mygrids.sortRows(9,"str", "asc");       
        //mygrids.sortRows(0,"str", "des");
        mygrids.attachEvent("onCheck",selectParent);       
       
        mygrids.attachEvent("onOpenEnd", function(id,state){
         mygrids.sortRows(9,"str", "asc");    
         mygrids.sortRows(0,"str", "asc");
         mygrids.groupBy(9);
         //mygrids.sortRows(9,"str", "asc"); 
         //mygrids.sortRows(0,"str", "des");       
       }); 
    
          
    
        var ids=mygrids.getAllRowIds();        
         var allRowIdList = ids.split(",");       
        for(i =0; i<allRowIdList.length; i++ ){
            mygrids.cells(allRowIdList[i],5).setDisabled(true);        
            mygrids.cells(allRowIdList[i],6).setDisabled(true); 
            mygrids.cells(allRowIdList[i],7).setDisabled(true);         
           if (mygrids.hasChildren(allRowIdList[i]) > 0 ){            
             var allChildren = mygrids.getAllSubItems(allRowIdList[i]);
                var subItemsList = allChildren.split(",");                                             
                 for(j =0; j<subItemsList.length; j++ ){                  
                      mygrids.cells(subItemsList[j],5).setDisabled(true);   
                      mygrids.cells(subItemsList[j],6).setDisabled(true);
                      mygrids.cells(subItemsList[j],7).setDisabled(true);                          
                 }                    
           }
        }         
   }
 
 dhtmlXGridObject.prototype._in_header_special=function(tag,index,data){ 
        tag.innerHTML=data[0];
        tag.title="A searchable field designating the standard USAID areas the indicator supports, if one exists."; 
 }
 dhtmlXGridObject.prototype._in_header_special1=function(tag,index,data){ 
    tag.innerHTML=data[0];
    tag.title="A searchable, editable field for users to identify Mission specific groups of indicators."; 
 }
   
 dhtmlXGridObject.prototype._in_header_filter_checkbox=function(t,i,c){
 t.innerHTML=c[0]+"<input type='checkbox' />"+c[1];
 var self=this;
 t.firstChild.onclick=function(e){
   self.filterBy(i,this.checked?1:0);
  (e||event).cancelBubble=true;
   mygrids.sortRows(9,"str", "asc");      
   mygrids.sortRows(0,"str", "asc");
   mygrids.groupBy(9);
 }
}
    
   function doStart(indexes,values) {
    count = 0;
    for (i=0;i<values.length; i++){
      if(values[i].length != 0){
       count = count + 1;
      }
    }
     mygrids.sortRows(0,"str", "asc");     
      return true;
   }
   
    function doExpand(){
      if(count == 0){
          var id = mygrids.getRowId(0);
          //alert(id);
          var allChildren = mygrids.getSubItems(id);
          var subItemsList = allChildren.split(",");
          for(i=0;i<subItemsList.length;i++){
           mygrids.closeItem(subItemsList[i]);
          }           
          } else {
          mygrids.expandAll();
          }  
            
 }
  
   
    function lockCheckbox(id){
        var n = mygrids.getItemImage(id);
        var val = mygrids.cells(id,8).getValue();
        if((n == 'sub-indicator.png' || n == 'custom-sub-indicator.png')&& val == 1){
            mygrids.cells(mygrids.getParentId(id),8).setDisabled(true);
        }
        if (mygrids.cells(id,8).getAttribute("disabled")){
              mygrids.cells(id,8).setDisabled(true);
        }
    }

    
    function selectParent(rId, cInd, state){   
       var pId = mygrids.getParentId(rId);
       var j = mygrids.getItemImage(pId);
       var type = mygrids.cells(pId,8).getAttribute("disabled");
       var count = 0;         
      
       if(state){ 
           if (mygrids.cells(pId,8).getValue() == 0 && (j =='indicator.png' || j == 'custom-indicator.png' )){
                          mygrids.cells(pId,8).setValue(1);
           }
           mygrids.cells(pId,8).setDisabled(true);
           }
        else{if ( (!state) || ( mygrids.cells(pId,8).getValue() == 1 &&(mygrids.getRowById(pId)._locked) != true)){       
                    if (mygrids.hasChildren(pId) > 0 ){
                        var allChildren = mygrids.getAllSubItems(pId);
                        var subItemsList = allChildren.split(",");                                              
                        for(i =0; i<subItemsList.length; i++ ){                          
                            if (mygrids.cells(subItemsList[i],8).getValue() == 1){
                            count = count +1;
                            }
                        }                  
                      if(count == 0 && !type){                                           
                             mygrids.cells(pId,8).setDisabled(false);
                        }else {
                                 if(count > 0){                                 
                                  if(mygrids.cells(pId,8).getValue() == 0 &&  (j =='indicator.png' || j == 'custom-indicator.png' )){
                                      mygrids.cells(pId,8).setValue(1);                        
                                  }
                                  mygrids.cells(pId,8).setDisabled(true);
                        }                        
                        }
                    }
           }            
      }     
   }
   
   function doonMouseOver(id,index){
       var val = mygrids.getItemImage(id);
       var indVal = mygrids.cellById(id,0).getValue();
      // indVal= indVal.substring(6);
    /*
       if (val == "pse.png") {
       mygrids.cellById(id,0).setAttribute("title","Source");
       }   */
       if (val == "indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Indicator: "+indVal);
       }
       if (val == "sub-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Disaggregation: "+indVal);
       }
       if (val == "custom-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Custom Indicator: "+indVal);
       }
       if (val == "custom-sub-indicator.png") {
       mygrids.cellById(id,0).setAttribute("title","Custom Disaggregation: "+indVal);
       }
       var val1 = mygrids.cells(id,index).getValue();
       if (val1 == "") return false; 
       return true;
   }
   
  function call02(hiddenId){
        var checked = [];
        mygrids.filterBy(0,"");
        mygrids.filterBy(1,"",true);
        mygrids.filterBy(2,"",true);
        mygrids.filterBy(3,"",true);
        mygrids.filterBy(4,"",true);
        mygrids.filterBy(5,false,true);
        mygrids.filterBy(6,false,true);
        mygrids.filterBy(7,false,true);
        mygrids.filterBy(8,false,true);
        
         var ids=mygrids.getAllRowIds();
         var allRowIdList = ids.split(",");     
         
         if(allRowIdList.length > 0){
            for(i =0; i<allRowIdList.length; i++ ){            
                if (mygrids.cells(allRowIdList[i],8).getValue() != 0){
                      checked.push(allRowIdList[i]);
                   if(mygrids.hasChildren(allRowIdList[i]) > 0){
                      
                      var allChildren = mygrids.getAllSubItems(allRowIdList[i]);
                      var subItemsList = allChildren.split(",");
                                            
                 for(j =0; j<subItemsList.length; j++ ){
                       if (mygrids.cells(subItemsList[j],8).getValue() != 0)
                          checked.push(subItemsList[j]);                      
              
                  }
                  }
                  
                }
             }
             }
        
        console.log('selected Indicators:'+checked);
       document.getElementById(hiddenId).value = checked;      
      
   }
   
   function addLoadEvent(func) {
      var oldonload = window.onload;
      if (typeof window.onload != 'function') {
        window.onload = func;
      } else {
        window.onload = function() {
          if (oldonload) {
            oldonload();
          }
          func();
        }
      }
    }
   addLoadEvent(dispSetupIndicatorTree); 

</script>

<!-- <apex:sectionHeader title="Manage {!pageTitle } Indicators"/>
<div style="height:5px; background:#1797C0;"></div> <br></br>
<apex:outputText style="font-size:11px;font-weight:bold;" value="{!navigationLink}" escape="false"> </apex:outputText> 
 <br></br>
  <br></br> -->
  <p style="color: rgb(1,91,167); font-weight:bold; font-size:12px; font-family:Arial, Helvetica, Sans-Serif; margin:9px;">Select the Indicators that are applicable.</p> 
<apex:form > 

 <apex:messages style="text-align:center;color:Red; overflow:auto; font-family:Helvetica, sans-serif; font-size:9pt;"/>
 
  <apex:variable var="rend" value="var1" rendered="{!isIndicatorExist == true}">
  
  <div style="width:97%;text-align:center;">
              
          <!--   <apex:commandButton rendered="{!isIndicatorExist == true}" value="Save" action="{!doSaveIndicatorForRecordType}" onclick="call02('{!$Component.selectedInd}')" />
              -->
                 
                 <apex:actionStatus startText=" Processing the stuff " stopText=" Done " id="counterStatus"  >
         <apex:facet name="start" >Processing...
          <img src="/apexpages/devmode/img/saveStatus.gif" />
         </apex:facet>
         <apex:facet name="stop">
         <apex:commandButton rendered="{!isIndicatorExist == true && isReadOnlyUser == false}" value="Save" action="{!doSaveIndicatorForRecordType}" onclick="call02('{!$Component.selectedInd}')"  status="counterStatus" reRender="counterStatus" />
              
         </apex:facet>
        </apex:actionStatus>
            <apex:commandButton action="{!CancelNGo}" value="Cancel" immediate="true"/>
          
                 
                 </div>                 
         <div id="gridboxCC" style="width:97%;height:250px; margin: 15px auto 0px auto;"></div>
         </apex:variable>          
   <apex:variable var="rend" value="var2"  rendered="{!isIndicatorExist == false}">
         <div id="gridboxCC" style="width:97%;height:250px; margin: 15px auto 0px auto;"></div>
         </apex:variable>                   

        <apex:repeat value="{!sourceNameList}" var="source">    
          <apex:repeat value="{!mainnodes}" var="parent">       
          </apex:repeat>  
       </apex:repeat>             
           <br></br><br></br>            
                 
            <div style="width:97%;text-align:center;">
                <apex:inputHidden value="{!selectedSourceIndicators}" id="selectedInd"/>
              
                 <apex:actionStatus startText=" Processing the stuff " stopText=" Done " id="counterStatus1"  >
         <apex:facet name="start" >Processing...
          <img src="/apexpages/devmode/img/saveStatus.gif" />
         </apex:facet>
         <apex:facet name="stop">
         <apex:commandButton rendered="{!isIndicatorExist == true && isReadOnlyUser == false}" value="Save" action="{!doSaveIndicatorForRecordType}" onclick="call02('{!$Component.selectedInd}')"  status="counterStatus1" reRender="counterStatus" />
              
         </apex:facet>
        </apex:actionStatus>
                <apex:commandButton action="{!CancelNGo}" value="Cancel" immediate="true"/>
                 </div>                 
              <br></br>  
         
 </apex:form>
</apex:component>